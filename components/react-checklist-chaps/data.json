{
  "rules": [
    {
      "id": "",
      "title": "Import files in order of built-in, external, internal",
      "tag": "import",
      "description": "",
      "gistBadId": "2969f66c5160d033f8c7a7a856418fe3",
      "gistGoodId": "70c945509b72ba01446fb76857c154c5"
    },
    {
      "id": "",
      "title": "Use camelCase for prop names or PascalCase if the prop value is a react component",
      "tag": "naming",
      "description": "",
      "gistBadId": "1f95d64c42ade473de3ec2835cb5c1cd",
      "gistGoodId": "3de8f226631921f58c968166c7cb8abc"
    },
    {
      "id": "",
      "title": "Don’t use underscore in method name",
      "tag": "naming",
      "description": "",
      "gistBadId": "cc58097d595561206e8207b749c3da92",
      "gistGoodId": "7e3d46c3c9967a3fe3897aff697712a0"
    },
    {
      "id": "",
      "title": "Reserverd prop Naming",
      "tag": "naming",
      "description": "",
      "gistBadId": "f6b8b6cf72ab6bd6cfdf401ebfa0a6f4",
      "gistGoodId": "3fa67af386f6bc395e4a15736aee4df9"
    },
    {
      "id": "",
      "title": "Name components using PascalCase and instances using camelCase",
      "tag": "naming",
      "description": "",
      "gistBadId": "1d2560f8adb9f3ef2344619db8cc00e3",
      "gistGoodId": "fdc02b4785b11f60f0c6875d1ec826be"
    },
    {
      "id": "",
      "title": "Use JSX shorthand",
      "tag": "jsx",
      "description": " Try to use JSX shorthand for passing boolean variables. Let’s say you want to control the title visibility of a Navbar component",
      "gistBadId": "8a00c9b00870deb84a41788f1bfc5e1f",
      "gistGoodId": "94e0f0f8fa8cb7e2d45d5801256259aa"
    },
    {
      "id": "",
      "title": "Use double quotes for jsx attributes and single quotes for all other js",
      "tag": "jsx",
      "description": "",
      "gistBadId": "85bb932733333df13cbefaf2e732efa7",
      "gistGoodId": "f1fb80c2a0f2e1b860faf69b21878caa"
    },
    {
      "id": "",
      "title": "Always wrap jsx in parentheses",
      "tag": "jsx",
      "description": "",
      "gistBadId": "62b5721f8317ec5766092021ae4b3afc",
      "gistGoodId": "6ca4ab33a4d1579a10795fcdb554f2ee"
    },
    {
      "id": "",
      "title": "Use Fragments instead of divs when possible",
      "tag": "jsx",
      "description": "",
      "gistBadId": "ed189ebf26f6b9d12dd3458d21fc7d79",
      "gistGoodId": "a9abdfe27f73461f241eb9f0e15dc686"
    },
    {
      "id": "",
      "title": "Use self-closing tags for components that don't have children",
      "tag": "jsx",
      "description": "",
      "gistBadId": "ad09846414dd42fdb4984fa5d4d1175b",
      "gistGoodId": "151bfb12ceabdaf0cf9da5ea930ff8c0"
    },
    {
      "id": "",
      "title": "Don’t add curly braces to string props",
      "tag": "jsx",
      "description": "",
      "gistBadId": "816b02d3a1c5feb968990a7b3992984f",
      "gistGoodId": "56eb82120b4e211022b96a65ea1b67ca"
    },
    {
      "id": "",
      "title": "Always include alt prop in your image tags",
      "tag": "jsx",
      "description": "",
      "gistBadId": "9c38e719e5a2a290a0ce88ad728ef784",
      "gistGoodId": "b50fa1621968478c2b5608ea0c404380"
    },
    {
      "id": "",
      "title": "Use ternary operators to shorten conditionals",
      "tag": "javascript",
      "description": "Within JSX, there are multiple ways for React developers to set up conditions. You can use the if/else or switch statements, but a third way is a ternary operator.",
      "gistBadId": "9f1441a2cbd375f4b5bc8d2c8c7d2b02",
      "gistGoodId": "43bb469558b3f771de8d94e6cd737784"
    },
    {
      "id": "",
      "title": "Use object literals to improve code readability",
      "tag": "javascript",
      "description": "",
      "gistBadId": "b42db3e2bc48fbf408225105ffb891dc",
      "gistGoodId": "6ab9ac5e9e44a46b1ce57d73511fc97e"
    },
    {
      "id": "",
      "title": "Don’t define a function inside render",
      "tag": "javascript",
      "description": "",
      "gistBadId": "5650949d022504afd50e3a171b018b3a",
      "gistGoodId": "f63fd453180c741a906b4705c1991d68"
    },
    {
      "id": "",
      "title": "Use Implicit return instead of explicit return",
      "tag": "javascript",
      "description": "",
      "gistBadId": "aee8d816ef715d8dec9883d01fa9c819",
      "gistGoodId": "e1ef9d0f86995572064415fd7169596b"
    },
    {
      "id": "",
      "title": "Use css in javascript",
      "tag": "javascript",
      "description": "",
      "gistBadId": "698c3401de676e2b7f5687045caf455a",
      "gistGoodId": "3a413878262989cbe6cafc404d78347f"
    },

    {
      "id": "",
      "title": "Use template literals instead of concatenation",
      "tag": "javascript",
      "description": "",
      "gistBadId": "f547adf4937ed9f78a7cfb4b7834d478",
      "gistGoodId": "8e8acdb6853b479c547b6b966a037dd6"
    },
    {
      "id": "",
      "title": "Use memo to avoid unecessary rendering",
      "tag": "performance",
      "description": "",
      "gistBadId": "f9977613d720d2b3793d9c51a12bb560",
      "gistGoodId": "f3b9241d789112f978690359f753d4ec"
    },
    {
      "id": "",
      "title": "Use object destructuring",
      "tag": "performance",
      "description": "",
      "gistBadId": "6c11aa1c1fce18caf962cdf66abad311",
      "gistGoodId": "0804227f780d9dc3b6c13961e8cab1bf"
    }
  ]
}
